/**
 * Skrypt do uruchamiania migracji Supabase
 * Uruchomienie: node run_migration.js
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import readline from 'readline';
import path from 'path';
import { fileURLToPath } from 'url';

// Konfiguracja ≈õcie≈ºek
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Utworzenie interfejsu do wczytywania danych z konsoli
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Funkcja do pobierania danych od u≈ºytkownika
const question = (query) => new Promise((resolve) => rl.question(query, resolve));

// G≈Ç√≥wna funkcja programu
async function main() {
  console.log('===== Narzƒôdzie do migracji Supabase =====');
  
  // Pobieranie danych konfiguracyjnych
  const supabaseUrl = await question('Podaj URL Supabase (np. https://xxxxxxxxxxxx.supabase.co): ');
  const supabaseKey = await question('Podaj klucz serwisowy Supabase (service_role key): ');
  
  // Inicjalizacja klienta Supabase
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('\n===== Sprawdzanie po≈ÇƒÖczenia z Supabase =====');
  try {
    // Testowanie po≈ÇƒÖczenia
    const { data, error } = await supabase.from('profiles').select('id').limit(1);
    
    if (error && error.code !== '42P01') { // Ignorujemy b≈ÇƒÖd braku tabeli, bo w≈Ça≈õnie jƒÖ tworzymy
      console.error('‚ùå B≈ÇƒÖd po≈ÇƒÖczenia:', error.message);
      if (error.message.includes('Authentication failed')) {
        console.log('‚ö†Ô∏è Upewnij siƒô, ≈ºe u≈ºywasz klucza service_role, a nie anon key!');
      }
      return;
    }
    
    console.log('‚úÖ Po≈ÇƒÖczenie z Supabase dzia≈Ça poprawnie');
    
    // Uruchamianie migracji
    await runMigration(supabase);
    
  } catch (error) {
    console.error('Nieoczekiwany b≈ÇƒÖd:', error);
  } finally {
    rl.close();
  }
}

// Funkcja do uruchamiania migracji
async function runMigration(supabase) {
  console.log('\n===== Uruchamianie migracji =====');
  
  try {
    // Odczytanie pliku migracji
    const migrationPath = path.join(__dirname, 'init_auth_tables.sql');
    const migrationSql = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÇ Wczytano plik migracji:', migrationPath);
    
    // Metoda 1: Uruchamianie przez funkcjƒô RPC (wymaga funkcji exec_sql w Supabase)
    const method = await question('Wybierz metodƒô wykonania migracji: \n1. Przez funkcjƒô RPC (exec_sql) \n2. Przez bezpo≈õrednie zapytania SQL \nWybierz (1/2): ');
    
    if (method === '1') {
      // Najpierw sprawdzamy czy funkcja exec_sql istnieje, je≈õli nie - tworzymy jƒÖ
      try {
        // Tworzenie funkcji exec_sql je≈õli nie istnieje
        const createFunctionSql = `
        CREATE OR REPLACE FUNCTION exec_sql(sql text) RETURNS void AS $$
        BEGIN
          EXECUTE sql;
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER;
        `;
        
        // Wykonanie zapytania SQL bezpo≈õrednio
        const { error: createFnError } = await supabase.rpc('exec_sql', { sql: createFunctionSql });
        if (createFnError && !createFnError.message.includes('already exists')) {
          console.log('‚ö†Ô∏è Nie mo≈ºna utworzyƒá funkcji exec_sql, pr√≥bujƒô metodƒÖ bezpo≈õredniƒÖ');
          await executeDirectQueries(supabase, migrationSql);
          return;
        }
        
        // Podzielenie na poszczeg√≥lne zapytania i wykonanie
        const queries = migrationSql.split(';').filter(q => q.trim().length > 0);
        
        for (let i = 0; i < queries.length; i++) {
          const query = queries[i];
          const { error } = await supabase.rpc('exec_sql', { sql: query + ';' });
          
          if (error) {
            console.error(`‚ùå B≈ÇƒÖd podczas wykonywania zapytania ${i+1}/${queries.length}:`, error.message);
            console.log('‚ö†Ô∏è Przechodzƒô do metody bezpo≈õredniej...');
            await executeDirectQueries(supabase, migrationSql);
            return;
          }
          
          console.log(`‚úÖ Zapytanie ${i+1}/${queries.length} wykonane`);
        }
      } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas korzystania z funkcji exec_sql:', error.message);
        console.log('‚ö†Ô∏è Przechodzƒô do metody bezpo≈õredniej...');
        await executeDirectQueries(supabase, migrationSql);
        return;
      }
    } else {
      await executeDirectQueries(supabase, migrationSql);
    }
    
    console.log('\n‚úÖ Migracja zosta≈Ça wykonana pomy≈õlnie');
    console.log('üîë Je≈õli migracja przebieg≈Ça bez b≈Çƒôd√≥w, sprawd≈∫ czy mo≈ºesz teraz zalogowaƒá siƒô do panelu administracyjnego');
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas uruchamiania migracji:', error.message);
  }
}

// Funkcja do bezpo≈õredniego wykonywania zapyta≈Ñ SQL
async function executeDirectQueries(supabase, migrationSql) {
  console.log('\n===== Wykonywanie zapyta≈Ñ bezpo≈õrednich =====');
  
  // Podzielenie na poszczeg√≥lne zapytania
  const queries = migrationSql.split(';').filter(q => q.trim().length > 0);
  
  // Wykonanie zapyta≈Ñ pojedynczo
  for (let i = 0; i < queries.length; i++) {
    const query = queries[i].trim();
    if (!query) continue;
    
    try {
      // Wykonanie zapytania SQL bezpo≈õrednio
      const { error } = await supabase.from('_sql').select().sql(query + ';');
      
      if (error && !error.message.includes('relation "_sql" does not exist')) {
        console.error(`‚ùå B≈ÇƒÖd podczas wykonywania zapytania ${i+1}/${queries.length}:`, error.message);
        continue;
      }
      
      console.log(`‚úÖ Zapytanie ${i+1}/${queries.length} wykonane`);
      
    } catch (error) {
      console.error(`‚ùå B≈ÇƒÖd podczas wykonywania zapytania ${i+1}/${queries.length}:`, error.message);
    }
  }
  
  // Sprawdzenie czy tabele zosta≈Çy utworzone
  try {
    const { error: profilesError } = await supabase.from('profiles').select('count').single();
    if (!profilesError) {
      console.log('‚úÖ Tabela "profiles" zosta≈Ça utworzona prawid≈Çowo');
    }
    
    const { error: adminActionsError } = await supabase.from('admin_actions').select('count').single();
    if (!adminActionsError) {
      console.log('‚úÖ Tabela "admin_actions" zosta≈Ça utworzona prawid≈Çowo');
    }
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas sprawdzania utworzonych tabel:', error.message);
  }
}

// Uruchomienie programu
main().catch(console.error); 